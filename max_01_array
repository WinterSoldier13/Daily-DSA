// MAXIMUM CONTIGOUS 0,1 in a BINARY array where n(0)=n(1)
eg.. 0,0,1,0,0,0,1,1
OUT: 6.... from index 2 to the end... is the biggest array where n(0)=n(1)


class Solution {
public:
    int sum(vector<int> nums)
{
    int sum=0;
    for(int x: nums)
    sum+=x;
    return sum;
}


int findMaxLength(vector<int>& nums) 
    {
        if(nums.size()==2 && sum(nums)==1)
        {
            return 2;
        }
        int max_ =0;
        replace(nums.begin(),nums.end(),0,-1);
        int sum=0;
        unordered_map<int,int> map;
        map[0] = 0;
        int len = 0;


        
        for(int i=0;i<nums.size();++i)
        {
            sum+=nums[i];

            if((map.find(sum) != map.end()))
            {
                len=max(len,abs(i-map[sum]));   
            }
            else
            {
                map[sum] = i;
            }
            
        }
        if(len%2!=0)
        return ++len; 
        return len;

        
    }
};